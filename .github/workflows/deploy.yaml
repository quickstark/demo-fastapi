name: Build and Deploy
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Add Docker Hub authentication step
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Specify AMD64 for Synology compatibility
          push: true
          tags: quickstark/api-images:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to Synology
        uses: appleboy/ssh-action@v1.0.3  # Use more recent stable version
        if: steps.docker_build.outcome == 'success'
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Debug: Check current user and environment
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "PATH: $PATH"
            
            # Check if Docker is available in common Synology locations
            if [ -f /usr/local/bin/docker ]; then
              DOCKER_CMD="/usr/local/bin/docker"
              echo "Found Docker at: $DOCKER_CMD"
            elif [ -f /usr/bin/docker ]; then
              DOCKER_CMD="/usr/bin/docker"
              echo "Found Docker at: $DOCKER_CMD"
            elif command -v docker >/dev/null 2>&1; then
              DOCKER_CMD="docker"
              echo "Found Docker in PATH: $(which docker)"
            else
              echo "Docker not found. Checking common locations..."
              ls -la /usr/local/bin/ | grep docker || echo "No docker in /usr/local/bin/"
              ls -la /usr/bin/ | grep docker || echo "No docker in /usr/bin/"
              exit 1
            fi
            
            # Test Docker command
            echo "Testing Docker command..."
            $DOCKER_CMD --version
            
            # Pull the latest image
            echo "Pulling latest image..."
            $DOCKER_CMD pull quickstark/api-images:latest
            
            # Stop and remove existing container if it exists
            echo "Stopping existing container..."
            $DOCKER_CMD stop images-api 2>/dev/null || echo "No existing container to stop"
            $DOCKER_CMD rm images-api 2>/dev/null || echo "No existing container to remove"
            
            # Run the new container
            echo "Starting new container..."
            $DOCKER_CMD run -d \
              --name images-api \
              --restart unless-stopped \
              -p 9000:8080 \
              -e PGHOST=host.docker.internal \
              -e PUID=1026 \
              -e PGID=100 \
              quickstark/api-images:latest
            
            # Verify container is running
            echo "Verifying container status..."
            $DOCKER_CMD ps | grep images-api || echo "Container not found in running processes"