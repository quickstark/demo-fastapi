name: Build and Deploy
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Add Docker Hub authentication step
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Specify AMD64 for Synology compatibility
          push: true
          tags: quickstark/api-images:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to Synology
        uses: appleboy/ssh-action@v1.0.3  # Use more recent stable version
        if: steps.docker_build.outcome == 'success'
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Debug: Check current user and environment
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "PATH: $PATH"
            
            # Check if Docker is available in common Synology locations
            if [ -f /usr/local/bin/docker ]; then
              DOCKER_CMD="/usr/local/bin/docker"
              echo "Found Docker at: $DOCKER_CMD"
            elif [ -f /usr/bin/docker ]; then
              DOCKER_CMD="/usr/bin/docker"
              echo "Found Docker at: $DOCKER_CMD"
            elif command -v docker >/dev/null 2>&1; then
              DOCKER_CMD="docker"
              echo "Found Docker in PATH: $(which docker)"
            else
              echo "Docker not found. Checking common locations..."
              ls -la /usr/local/bin/ | grep docker || echo "No docker in /usr/local/bin/"
              ls -la /usr/bin/ | grep docker || echo "No docker in /usr/bin/"
              exit 1
            fi
            
            # Check if we need sudo for Docker commands
            echo "Testing Docker permissions..."
            if $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "Docker accessible without sudo"
              DOCKER_CMD="$DOCKER_CMD"
            elif sudo $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "Docker requires sudo access"
              DOCKER_CMD="sudo $DOCKER_CMD"
            else
              echo "ERROR: Cannot access Docker even with sudo"
              echo "Please ensure the SSH user has Docker permissions or sudo access"
              exit 1
            fi
            
            # Test Docker command with proper permissions
            echo "Testing Docker command with permissions..."
            $DOCKER_CMD --version
            
            # Login to Docker Hub on Synology
            echo "Logging into Docker Hub..."
            if ! echo "${{ secrets.DOCKERHUB_TOKEN }}" | $DOCKER_CMD login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin; then
              echo "ERROR: Failed to login to Docker Hub"
              exit 1
            fi
            echo "✅ Successfully logged into Docker Hub"
            
            # Check current image digest before pulling
            echo "Checking current image digest..."
            CURRENT_DIGEST=$($DOCKER_CMD images --digests quickstark/api-images:latest --format "{{.Digest}}" 2>/dev/null || echo "none")
            echo "Current image digest: $CURRENT_DIGEST"
            
            # Pull the latest image with force
            echo "Pulling latest image (forced)..."
            if ! $DOCKER_CMD pull quickstark/api-images:latest; then
              echo "ERROR: Failed to pull Docker image"
              exit 1
            fi
            
            # Check new image digest after pulling
            NEW_DIGEST=$($DOCKER_CMD images --digests quickstark/api-images:latest --format "{{.Digest}}" 2>/dev/null || echo "none")
            echo "New image digest: $NEW_DIGEST"
            
            # Compare digests to see if image actually updated
            if [ "$CURRENT_DIGEST" != "$NEW_DIGEST" ]; then
              echo "✅ New image pulled successfully (digest changed)"
            else
              echo "ℹ️  Image digest unchanged (already latest)"
            fi
            
            # Force stop and remove existing container (using correct name)
            echo "Force stopping and removing existing container..."
            $DOCKER_CMD stop images-api 2>/dev/null || echo "No existing container to stop"
            $DOCKER_CMD rm -f images-api 2>/dev/null || echo "No existing container to remove"
            
            # Remove any dangling images to free space
            echo "Cleaning up dangling images..."
            $DOCKER_CMD image prune -f || echo "No dangling images to remove"
            
            # Run the new container (matching your Synology naming)
            echo "Starting new container with name 'images-api'..."
            DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "Deployment timestamp: $DEPLOY_TIME"
            
            if ! $DOCKER_CMD run -d \
              --name images-api \
              --restart unless-stopped \
              --label "deployment.timestamp=$DEPLOY_TIME" \
              --label "deployment.source=github-actions" \
              --label "deployment.image_digest=$NEW_DIGEST" \
              -p 9000:8080 \
              -e PGHOST=host.docker.internal \
              -e PUID=1026 \
              -e PGID=100 \
              quickstark/api-images:latest; then
              echo "ERROR: Failed to start container"
              exit 1
            fi
            
            echo "✅ Container started successfully"
            
            # Verify container is running and get detailed info
            echo "Verifying container status..."
            $DOCKER_CMD ps -a | grep images-api || echo "Container not found in ps output"
            
            # Show container labels and details
            echo "Container labels and details:"
            $DOCKER_CMD inspect images-api --format='{{range $key, $value := .Config.Labels}}{{$key}}={{$value}}{{"\n"}}{{end}}' 2>/dev/null || echo "Could not retrieve container labels"
            
            # Show container logs for verification
            echo "Container logs (last 10 lines):"
            $DOCKER_CMD logs --tail 10 images-api 2>/dev/null || echo "Could not retrieve logs"
            
            # Show image info for verification
            echo "Image information:"
            $DOCKER_CMD images quickstark/api-images:latest
            
            # Test if the API is responding
            echo "Testing API endpoint (waiting 10 seconds for startup)..."
            sleep 10
            
            # Try multiple health check approaches
            if curl -f http://localhost:9000/health 2>/dev/null; then
              echo "✅ API health check passed (/health endpoint)"
            elif curl -f http://localhost:9000/ 2>/dev/null; then
              echo "✅ API root endpoint accessible"
            else
              echo "⚠️  API health check failed - checking if container is running..."
              if $DOCKER_CMD ps | grep images-api | grep -q "Up"; then
                echo "✅ Container is running, API might still be starting up"
              else
                echo "❌ Container is not running properly"
                $DOCKER_CMD logs images-api
              fi
            fi
            
            echo "🎉 Deployment completed!"