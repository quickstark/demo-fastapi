name: Build and Deploy
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Set up Python for testing
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Configure Datadog Test Optimization
      - name: Configure Datadog Test Optimization
        uses: datadog/test-visibility-github-action@v2
        with:
          languages: python
          api_key: ${{ secrets.DATADOG_API_KEY }}
          site: datadoghq.com
      
      # Run tests with Datadog integration
      - name: Run tests
        env:
          DD_ENV: ci
          DD_SERVICE: ${{ secrets.DD_SERVICE }}
          DD_VERSION: ${{ github.sha }}
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_SITE: datadoghq.com
          DD_CIVISIBILITY_ENABLED: true
          DD_CIVISIBILITY_ITR_ENABLED: true
          # MongoDB test environment variables (using dummy values for CI)
          MONGO_CONN: localhost
          MONGO_USER: testuser
          MONGO_PW: testpass
          # Other optional environment variables with default values
          OPENAI_API_KEY: dummy-key-for-testing
          DATADOG_API_KEY: dummy-key-for-testing
          DATADOG_APP_KEY: dummy-key-for-testing
          # SENDGRID_API_KEY: dummy-key-for-testing  # REMOVED: Migrating to SES
          SES_REGION: us-east-1
          SES_FROM_EMAIL: test@example.com
          NOTION_API_KEY: dummy-key-for-testing
          NOTION_DATABASE_ID: dummy-key-for-testing
          AMAZON_KEY_ID: dummy-key-for-testing
          AMAZON_KEY_SECRET: dummy-key-for-testing
          AMAZON_S3_BUCKET: dummy-bucket-for-testing
          BUG_REPORT_EMAIL: test@example.com
        run: |
          echo "Running tests with Datadog Test Optimization..."
          pytest --ddtrace -v
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Add Docker Hub authentication step
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Install Datadog CI for deployment tracking
      - name: Install Datadog CI
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci version
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Specify AMD64 for Synology compatibility
          push: true
          tags: quickstark/api-images:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to Synology
        id: synology_deploy
        uses: appleboy/ssh-action@v1.0.3  # Use more recent stable version
        if: steps.docker_build.outcome == 'success'
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SYNOLOGY_SSH_KEY }}
          passphrase: ${{ secrets.SYNOLOGY_SSH_PASSPHRASE }}
          script: |
            # Debug: Check current user and environment
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "PATH: $PATH"
            
            # Check if Docker is available in common Synology locations
            if [ -f /usr/local/bin/docker ]; then
              DOCKER_CMD="/usr/local/bin/docker"
              echo "Found Docker at: $DOCKER_CMD"
            elif [ -f /usr/bin/docker ]; then
              DOCKER_CMD="/usr/bin/docker"
              echo "Found Docker at: $DOCKER_CMD"
            elif command -v docker >/dev/null 2>&1; then
              DOCKER_CMD="docker"
              echo "Found Docker in PATH: $(which docker)"
            else
              echo "Docker not found. Checking common locations..."
              ls -la /usr/local/bin/ | grep docker || echo "No docker in /usr/local/bin/"
              ls -la /usr/bin/ | grep docker || echo "No docker in /usr/bin/"
              exit 1
            fi
            
            # Check if we need sudo for Docker commands
            echo "Testing Docker permissions..."
            if $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "Docker accessible without sudo"
              DOCKER_CMD="$DOCKER_CMD"
            elif sudo $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "Docker requires sudo access"
              DOCKER_CMD="sudo $DOCKER_CMD"
            else
              echo "ERROR: Cannot access Docker even with sudo"
              echo "Please ensure the SSH user has Docker permissions or sudo access"
              exit 1
            fi
            
            # Test Docker command with proper permissions
            echo "Testing Docker command with permissions..."
            $DOCKER_CMD --version
            
            # Login to Docker Hub on Synology
            echo "Logging into Docker Hub..."
            if ! echo "${{ secrets.DOCKERHUB_TOKEN }}" | $DOCKER_CMD login --username "${{ secrets.DOCKERHUB_USER }}" --password-stdin; then
              echo "ERROR: Failed to login to Docker Hub"
              exit 1
            fi
            echo "✅ Successfully logged into Docker Hub"
            
            # Check current image digest before pulling
            echo "Checking current image digest..."
            CURRENT_DIGEST=$($DOCKER_CMD images --digests quickstark/api-images:latest --format "{{.Digest}}" 2>/dev/null || echo "none")
            echo "Current image digest: $CURRENT_DIGEST"
            
            # Pull the latest image with force
            echo "Pulling latest image (forced)..."
            if ! $DOCKER_CMD pull quickstark/api-images:latest; then
              echo "ERROR: Failed to pull Docker image"
              exit 1
            fi
            
            # Check new image digest after pulling
            NEW_DIGEST=$($DOCKER_CMD images --digests quickstark/api-images:latest --format "{{.Digest}}" 2>/dev/null || echo "none")
            echo "New image digest: $NEW_DIGEST"
            
            # Compare digests to see if image actually updated
            if [ "$CURRENT_DIGEST" != "$NEW_DIGEST" ]; then
              echo "✅ New image pulled successfully (digest changed)"
            else
              echo "ℹ️  Image digest unchanged (already latest)"
            fi
            
            # Force stop and remove existing container (using correct name)
            echo "Force stopping and removing existing container..."
            $DOCKER_CMD stop images-api 2>/dev/null || echo "No existing container to stop"
            $DOCKER_CMD rm -f images-api 2>/dev/null || echo "No existing container to remove"
            
            # Remove any dangling images to free space
            echo "Cleaning up dangling images..."
            $DOCKER_CMD image prune -f || echo "No dangling images to remove"
            
            # Run the new container (matching your Synology naming)
            echo "Starting new container with name 'images-api'..."
            DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "Deployment timestamp: $DEPLOY_TIME"
            
            if ! $DOCKER_CMD run -d \
              --name images-api \
              --restart unless-stopped \
              --label "deployment.timestamp=$DEPLOY_TIME" \
              --label "deployment.source=github-actions" \
              --label "deployment.image_digest=$NEW_DIGEST" \
              -p 9000:8080 \
              -e DD_SERVICE="${{ secrets.DD_SERVICE }}" \
              -e DD_ENV="${{ secrets.DD_ENV }}" \
              -e DD_VERSION="${{ secrets.DD_VERSION }}" \
              -e DD_PROFILING_ENABLED=true \
              -e DD_PROFILING_TIMELINE_ENABLED=true \
              -e DD_DBM_PROPAGATION_MODE=full \
              -e PGHOST="${{ secrets.PGHOST }}" \
              -e PGPORT="${{ secrets.PGPORT }}" \
              -e PGDATABASE="${{ secrets.PGDATABASE }}" \
              -e PGUSER="${{ secrets.PGUSER }}" \
              -e PGPASSWORD="${{ secrets.PGPASSWORD }}" \
              -e SQLSERVERHOST="${{ secrets.SQLSERVERHOST }}" \
              -e SQLSERVERPORT="${{ secrets.SQLSERVERPORT }}" \
              -e SQLSERVERUSER="${{ secrets.SQLSERVERUSER }}" \
              -e SQLSERVERPW="${{ secrets.SQLSERVERPW }}" \
              -e SQLSERVERDB="${{ secrets.SQLSERVERDB }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e DATADOG_API_KEY="${{ secrets.DATADOG_API_KEY }}" \
              -e DATADOG_APP_KEY="${{ secrets.DATADOG_APP_KEY }}" \
              -e SES_REGION="${{ secrets.SES_REGION }}" \
              -e SES_FROM_EMAIL="${{ secrets.SES_FROM_EMAIL }}" \
              -e NOTION_API_KEY="${{ secrets.NOTION_API_KEY }}" \
              -e NOTION_DATABASE_ID="${{ secrets.NOTION_DATABASE_ID }}" \
              -e AMAZON_KEY_ID="${{ secrets.AMAZON_KEY_ID }}" \
              -e AMAZON_KEY_SECRET="${{ secrets.AMAZON_KEY_SECRET }}" \
              -e AMAZON_S3_BUCKET="${{ secrets.AMAZON_S3_BUCKET }}" \
              -e MONGO_CONN="${{ secrets.MONGO_CONN }}" \
              -e MONGO_USER="${{ secrets.MONGO_USER }}" \
              -e MONGO_PW="${{ secrets.MONGO_PW }}" \
              -e BUG_REPORT_EMAIL="${{ secrets.BUG_REPORT_EMAIL }}" \
              -e PUID=1026 \
              -e PGID=100 \
              quickstark/api-images:latest; then
              echo "ERROR: Failed to start container"
              exit 1
            fi
            
            echo "✅ Container started successfully"
            
            # Verify container is running and get detailed info
            echo "Verifying container status..."
            $DOCKER_CMD ps -a | grep images-api || echo "Container not found in ps output"
            
            # Show container labels and details
            echo "Container labels and details:"
            $DOCKER_CMD inspect images-api --format='{{range $key, $value := .Config.Labels}}{{$key}}={{$value}}{{"\n"}}{{end}}' 2>/dev/null || echo "Could not retrieve container labels"
            
            # Show container logs for verification
            echo "Container logs (last 10 lines):"
            $DOCKER_CMD logs --tail 10 images-api 2>/dev/null || echo "Could not retrieve logs"
            
            # Show image info for verification
            echo "Image information:"
            $DOCKER_CMD images quickstark/api-images:latest
            
            # Test if the API is responding
            echo "Testing API endpoint (waiting 10 seconds for startup)..."
            sleep 10
            
            # Try multiple health check approaches
            if curl -f http://localhost:9000/health 2>/dev/null; then
              echo "✅ API health check passed (/health endpoint)"
            elif curl -f http://localhost:9000/ 2>/dev/null; then
              echo "✅ API root endpoint accessible"
            else
              echo "⚠️  API health check failed - checking if container is running..."
              if $DOCKER_CMD ps | grep images-api | grep -q "Up"; then
                echo "✅ Container is running, API might still be starting up"
              else
                echo "❌ Container is not running properly"
                $DOCKER_CMD logs images-api
              fi
            fi
            
            echo "🎉 Deployment completed!"

      # Mark deployment in Datadog
      - name: Mark Deployment in Datadog
        if: steps.synology_deploy.outcome == 'success'
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_SITE: datadoghq.com
          DD_BETA_COMMANDS_ENABLED: 1
          DD_GITHUB_JOB_NAME: build-and-deploy
        run: |
          # Get the commit SHA for the revision
          REVISION="${{ github.sha }}"
          SHORT_SHA="${REVISION:0:7}"
          
          # Get the current timestamp
          DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "Marking deployment in Datadog..."
          echo "Service: ${{ secrets.DD_SERVICE }}"
          echo "Environment: ${{ secrets.DD_ENV }}"
          echo "Revision: $SHORT_SHA"
          echo "Deploy Time: $DEPLOY_TIME"
          
          # Mark the deployment with comprehensive tags
          datadog-ci deployment mark \
            --env "${{ secrets.DD_ENV }}" \
            --service "${{ secrets.DD_SERVICE }}" \
            --revision "$SHORT_SHA" \
            --tags "deployment_method:github_actions" \
            --tags "repository:${{ github.repository }}" \
            --tags "branch:${{ github.ref_name }}" \
            --tags "actor:${{ github.actor }}" \
            --tags "workflow:${{ github.workflow }}" \
            --tags "run_id:${{ github.run_id }}" \
            --tags "deploy_time:$DEPLOY_TIME" \
            --no-fail
          
          echo "✅ Deployment marked in Datadog successfully!"