name: Build and Deploy (with External Secrets)
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Option A: HashiCorp Vault Integration
      - name: Import Secrets from Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/data/fastapi-app DD_SERVICE | DD_SERVICE ;
            secret/data/fastapi-app DD_ENV | DD_ENV ;
            secret/data/fastapi-app DD_VERSION | DD_VERSION ;
            secret/data/fastapi-app PGHOST | PGHOST ;
            secret/data/fastapi-app PGPORT | PGPORT ;
            secret/data/fastapi-app PGDATABASE | PGDATABASE ;
            secret/data/fastapi-app PGUSER | PGUSER ;
            secret/data/fastapi-app PGPASSWORD | PGPASSWORD ;
            secret/data/fastapi-app OPENAI_API_KEY | OPENAI_API_KEY ;
            secret/data/fastapi-app DATADOG_API_KEY | DATADOG_API_KEY ;
            secret/data/fastapi-app DATADOG_APP_KEY | DATADOG_APP_KEY ;
            secret/data/fastapi-app SENDGRID_API_KEY | SENDGRID_API_KEY ;
            secret/data/fastapi-app NOTION_API_KEY | NOTION_API_KEY ;
            secret/data/fastapi-app NOTION_DATABASE_ID | NOTION_DATABASE_ID ;
            secret/data/fastapi-app AMAZON_KEY_ID | AMAZON_KEY_ID ;
            secret/data/fastapi-app AMAZON_KEY_SECRET | AMAZON_KEY_SECRET ;
            secret/data/fastapi-app AMAZON_S3_BUCKET | AMAZON_S3_BUCKET ;
            secret/data/fastapi-app MONGO_CONN | MONGO_CONN ;
            secret/data/fastapi-app MONGO_USER | MONGO_USER ;
            secret/data/fastapi-app MONGO_PW | MONGO_PW ;
            secret/data/fastapi-app BUG_REPORT_EMAIL | BUG_REPORT_EMAIL
      
      # Option B: AWS Secrets Manager Integration
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Get secrets from AWS Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            fastapi-app/production
          parse-json-secrets: true
      
      # Option C: Azure Key Vault Integration
      - name: Azure Key Vault - Get Secrets
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "your-keyvault-name"
          secrets: 'DD-SERVICE, DD-ENV, DD-VERSION, PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD, OPENAI-API-KEY, DATADOG-API-KEY, DATADOG-APP-KEY, SENDGRID-API-KEY, NOTION-API-KEY, NOTION-DATABASE-ID, AMAZON-KEY-ID, AMAZON-KEY-SECRET, AMAZON-S3-BUCKET, MONGO-CONN, MONGO-USER, MONGO-PW, BUG-REPORT-EMAIL'
        id: myGetSecretAction
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Add Docker Hub authentication step
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: quickstark/api-images:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to Synology
        uses: appleboy/ssh-action@v1.0.3
        if: steps.docker_build.outcome == 'success'
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Find Docker command
            if [ -f /usr/local/bin/docker ]; then
              DOCKER_CMD="/usr/local/bin/docker"
            elif [ -f /usr/bin/docker ]; then
              DOCKER_CMD="/usr/bin/docker"
            else
              DOCKER_CMD="docker"
            fi
            
            # Check Docker permissions
            if ! $DOCKER_CMD --version >/dev/null 2>&1; then
              DOCKER_CMD="sudo $DOCKER_CMD"
            fi
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | $DOCKER_CMD login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Pull latest image
            $DOCKER_CMD pull quickstark/api-images:latest
            
            # Stop and remove existing container
            $DOCKER_CMD stop images-api 2>/dev/null || true
            $DOCKER_CMD rm -f images-api 2>/dev/null || true
            
            # Start new container with environment variables from external secrets
            $DOCKER_CMD run -d \
              --name images-api \
              --restart unless-stopped \
              -p 9000:8080 \
              -e DD_SERVICE="${{ env.DD_SERVICE }}" \
              -e DD_ENV="${{ env.DD_ENV }}" \
              -e DD_VERSION="${{ env.DD_VERSION }}" \
              -e PGHOST="${{ env.PGHOST }}" \
              -e PGPORT="${{ env.PGPORT }}" \
              -e PGDATABASE="${{ env.PGDATABASE }}" \
              -e PGUSER="${{ env.PGUSER }}" \
              -e PGPASSWORD="${{ env.PGPASSWORD }}" \
              -e OPENAI_API_KEY="${{ env.OPENAI_API_KEY }}" \
              -e DATADOG_API_KEY="${{ env.DATADOG_API_KEY }}" \
              -e DATADOG_APP_KEY="${{ env.DATADOG_APP_KEY }}" \
              -e SENDGRID_API_KEY="${{ env.SENDGRID_API_KEY }}" \
              -e NOTION_API_KEY="${{ env.NOTION_API_KEY }}" \
              -e NOTION_DATABASE_ID="${{ env.NOTION_DATABASE_ID }}" \
              -e AMAZON_KEY_ID="${{ env.AMAZON_KEY_ID }}" \
              -e AMAZON_KEY_SECRET="${{ env.AMAZON_KEY_SECRET }}" \
              -e AMAZON_S3_BUCKET="${{ env.AMAZON_S3_BUCKET }}" \
              -e MONGO_CONN="${{ env.MONGO_CONN }}" \
              -e MONGO_USER="${{ env.MONGO_USER }}" \
              -e MONGO_PW="${{ env.MONGO_PW }}" \
              -e BUG_REPORT_EMAIL="${{ env.BUG_REPORT_EMAIL }}" \
              -e PUID=1026 \
              -e PGID=100 \
              quickstark/api-images:latest
            
            # Health check
            sleep 10
            curl -f http://localhost:9000/health || echo "Health check failed" 