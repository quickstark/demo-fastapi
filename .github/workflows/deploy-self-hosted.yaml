name: Build and Deploy (Self-Hosted Runner)
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Also allow manual trigger
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      skip_deploy:
        description: 'Skip deployment (build only)'
        required: false
        default: false
        type: boolean

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for SonarQube analysis
      
      # ===== SonarQube Analysis (Split into trackable steps) =====
      
      - name: 🔍 SonarQube - Code Analysis
        id: sonar_scan
        if: ${{ secrets.SONAR_TOKEN != '' && secrets.SONAR_HOST_URL != '' }}
        run: |
          echo "Running SonarQube analysis in Docker container..."
          docker run --rm \
            -e SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}" \
            -e SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=quickstark_demo-fastapi_6ba235ba-ff96-459d-8607-919121b2ad98 \
            -Dsonar.sources=main.py,src \
            -Dsonar.tests=tests \
            -Dsonar.language=py \
            -Dsonar.python.version=3.9,3.10,3.11,3.12 \
            -Dsonar.sourceEncoding=UTF-8 || {
              echo "sonar_failed=true" >> $GITHUB_OUTPUT
              echo "⚠️  SonarQube scan failed - continuing deployment"
              exit 0
            }
          echo "sonar_failed=false" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: 📊 SonarQube - Fetch Metrics
        id: sonar_metrics
        if: ${{ steps.sonar_scan.outputs.sonar_failed != 'true' && secrets.SONAR_TOKEN != '' }}
        run: |
          echo "Fetching SonarQube metrics..."
          sleep 5  # Wait for SonarQube to process
          
          PROJECT_KEY="quickstark_demo-fastapi_6ba235ba-ff96-459d-8607-919121b2ad98"
          
          # Fetch metrics from SonarQube API
          METRICS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=${PROJECT_KEY}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density" \
            2>/dev/null) || {
            echo "⚠️  Failed to fetch metrics"
            exit 0
          }
          
          # Parse metrics
          if [ -n "$METRICS" ]; then
            BUGS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="bugs") | .value // "0"' 2>/dev/null || echo "0")
            VULNS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "0"' 2>/dev/null || echo "0")
            SMELLS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "0"' 2>/dev/null || echo "0")
            COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"' 2>/dev/null || echo "0")
            
            echo "📊 Metrics: Bugs=$BUGS, Vulnerabilities=$VULNS, Code Smells=$SMELLS, Coverage=$COVERAGE%"
            
            # Output metrics for later use
            echo "bugs=$BUGS" >> $GITHUB_OUTPUT
            echo "vulnerabilities=$VULNS" >> $GITHUB_OUTPUT
            echo "code_smells=$SMELLS" >> $GITHUB_OUTPUT
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            
            # Send metrics to Datadog if available
            if command -v nc &> /dev/null && [ -n "${{ secrets.DD_API_KEY }}" ]; then
              echo "sonarqube.bugs:$BUGS|g|#project:demo-fastapi,branch:${{ github.ref_name }}" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
              echo "sonarqube.vulnerabilities:$VULNS|g|#project:demo-fastapi,branch:${{ github.ref_name }}" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
              echo "sonarqube.code_smells:$SMELLS|g|#project:demo-fastapi,branch:${{ github.ref_name }}" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
              echo "sonarqube.coverage:$COVERAGE|g|#project:demo-fastapi,branch:${{ github.ref_name }}" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
            fi
          fi
        continue-on-error: true
      
      - name: ✅ SonarQube - Quality Gate Check
        if: ${{ steps.sonar_scan.outputs.sonar_failed != 'true' && secrets.SONAR_TOKEN != '' }}
        run: |
          echo "Checking Quality Gate status..."
          
          PROJECT_KEY="quickstark_demo-fastapi_6ba235ba-ff96-459d-8607-919121b2ad98"
          
          # Get latest analysis
          ANALYSIS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/project_analyses/search?project=${PROJECT_KEY}" \
            2>/dev/null) || {
            echo "⚠️  Could not fetch analysis status"
            exit 0
          }
          
          ANALYSIS_ID=$(echo "$ANALYSIS" | jq -r '.analyses[0].key' 2>/dev/null)
          
          if [ -n "$ANALYSIS_ID" ] && [ "$ANALYSIS_ID" != "null" ]; then
            # Check quality gate
            QG_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
              | jq -r '.projectStatus.status' 2>/dev/null)
            
            if [ "$QG_STATUS" = "OK" ]; then
              echo "✅ Quality Gate: PASSED"
            elif [ "$QG_STATUS" = "ERROR" ]; then
              echo "❌ Quality Gate: FAILED (continuing anyway)"
            else
              echo "⚠️  Quality Gate: $QG_STATUS"
            fi
          else
            echo "⚠️  No analysis found to check"
          fi
        continue-on-error: true
      
      # ===== System Information =====
      
      - name: System Information
        run: |
          echo "=== System Information ==="
          echo "Hostname: $(hostname)"
          echo "User: $(whoami)"
          echo "Working Directory: $(pwd)"
          echo "OS: $(uname -a)"
          echo "=========================="
      
      - name: Check Available Tools
        run: |
          echo "=== Checking Available Tools ==="
          
          # Check Python
          if command -v python3 &> /dev/null; then
            echo "✓ Python3: $(python3 --version)"
          else
            echo "✗ Python3 not found"
          fi
          
          # Check Docker
          if command -v docker &> /dev/null; then
            echo "✓ Docker: $(docker --version)"
            if docker ps &> /dev/null; then
              echo "  ✓ Docker daemon accessible"
            else
              echo "  ✗ Docker daemon not accessible"
            fi
          else
            echo "✗ Docker not found"
          fi
          
          # Check Docker Compose
          if command -v docker-compose &> /dev/null; then
            echo "✓ Docker Compose: $(docker-compose --version)"
          else
            echo "✗ Docker Compose not found"
          fi
          
          # Check curl and other tools
          command -v curl &> /dev/null && echo "✓ curl available" || echo "✗ curl not found"
          command -v jq &> /dev/null && echo "✓ jq available" || echo "✗ jq not found"
          command -v nc &> /dev/null && echo "✓ netcat available" || echo "✗ netcat not found"
          
          echo "=========================="
      
      # ===== Testing =====
      
      - name: Setup Python Environment (if available)
        if: ${{ !inputs.skip_tests || github.event_name == 'push' }}
        run: |
          if command -v python3 &> /dev/null; then
            echo "Setting up Python environment..."
            python3 -m venv venv || true
            source venv/bin/activate || true
            pip install --upgrade pip || true
            pip install -r requirements.txt || true
          else
            echo "Python not available, skipping Python setup"
          fi
      
      - name: Run Tests in Container
        if: ${{ !inputs.skip_tests || github.event_name == 'push' }}
        run: |
          if command -v docker &> /dev/null && docker ps &> /dev/null; then
            echo "Running tests in Docker container..."
            docker run --rm \
              -v $(pwd):/app \
              -w /app \
              -e MONGO_CONN=localhost \
              -e MONGO_USER=testuser \
              -e MONGO_PW=testpass \
              -e OPENAI_API_KEY=dummy-key-for-testing \
              -e SES_REGION=us-east-1 \
              -e SES_FROM_EMAIL=test@example.com \
              -e NOTION_API_KEY=dummy-key-for-testing \
              -e NOTION_DATABASE_ID=dummy-key-for-testing \
              -e AMAZON_KEY_ID=dummy-key-for-testing \
              -e AMAZON_KEY_SECRET=dummy-key-for-testing \
              -e AMAZON_S3_BUCKET=dummy-bucket-for-testing \
              -e BUG_REPORT_EMAIL=test@example.com \
              python:3.12-slim bash -c "pip install -r requirements.txt && pytest -v" || echo "Tests failed or skipped"
          elif command -v python3 &> /dev/null; then
            echo "Running tests with local Python..."
            source venv/bin/activate || true
            pytest -v || echo "Tests failed or skipped"
          else
            echo "⚠️  Cannot run tests - no Python or Docker available"
          fi
      
      # ===== Build and Push =====
      
      - name: Build Docker Image
        id: docker_build
        run: |
          if command -v docker &> /dev/null && docker ps &> /dev/null; then
            echo "Building Docker image..."
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USER }}" --password-stdin
            
            # Build the image
            docker build -t quickstark/api-images:latest .
            
            # Tag with commit SHA
            docker tag quickstark/api-images:latest quickstark/api-images:${{ github.sha }}
            
            # Push to Docker Hub
            docker push quickstark/api-images:latest
            docker push quickstark/api-images:${{ github.sha }}
            
            echo "✅ Docker image built and pushed successfully"
          else
            echo "❌ Docker not available or not accessible"
            exit 1
          fi
      
      # ===== Deployment =====
      
      - name: Deploy to Local Docker
        if: ${{ !inputs.skip_deploy && steps.docker_build.outcome == 'success' }}
        run: |
          echo "=== Deploying to Local Docker on GMKTec ==="
          
          # Stop and remove existing container
          echo "Stopping existing container..."
          docker stop images-api 2>/dev/null || echo "No existing container to stop"
          docker rm -f images-api 2>/dev/null || echo "No existing container to remove"
          
          # Clean up old images to save space
          echo "Cleaning up old images..."
          docker image prune -f || true
          
          # Pull the latest image
          echo "Pulling latest image from Docker Hub..."
          docker pull quickstark/api-images:latest
          
          # Run new container with production configuration
          echo "Starting new container..."
          docker run -d \
            --name images-api \
            --restart unless-stopped \
            -p 9000:8080 \
            --add-host=host.docker.internal:host-gateway \
            -e DD_SERVICE="${{ secrets.DD_SERVICE }}" \
            -e DD_ENV="${{ secrets.DD_ENV }}" \
            -e DD_VERSION="${{ github.sha }}" \
            -e DD_AGENT_HOST="${{ secrets.DD_AGENT_HOST || 'host.docker.internal' }}" \
            -e DD_PROFILING_ENABLED=true \
            -e DD_PROFILING_TIMELINE_ENABLED=true \
            -e DD_DBM_PROPAGATION_MODE=full \
            -e PGHOST="${{ secrets.PGHOST }}" \
            -e PGPORT="${{ secrets.PGPORT }}" \
            -e PGDATABASE="${{ secrets.PGDATABASE }}" \
            -e PGUSER="${{ secrets.PGUSER }}" \
            -e PGPASSWORD="${{ secrets.PGPASSWORD }}" \
            -e SQLSERVER_ENABLED="${{ secrets.SQLSERVER_ENABLED || 'true' }}" \
            -e SQLSERVERHOST="${{ secrets.SQLSERVERHOST }}" \
            -e SQLSERVERPORT="${{ secrets.SQLSERVERPORT }}" \
            -e SQLSERVERUSER="${{ secrets.SQLSERVERUSER }}" \
            -e SQLSERVERPW="${{ secrets.SQLSERVERPW }}" \
            -e SQLSERVERDB="${{ secrets.SQLSERVERDB }}" \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -e DD_API_KEY="${{ secrets.DD_API_KEY }}" \
            -e DD_APP_KEY="${{ secrets.DD_APP_KEY }}" \
            -e SES_REGION="${{ secrets.SES_REGION }}" \
            -e SES_FROM_EMAIL="${{ secrets.SES_FROM_EMAIL }}" \
            -e NOTION_API_KEY="${{ secrets.NOTION_API_KEY }}" \
            -e NOTION_DATABASE_ID="${{ secrets.NOTION_DATABASE_ID }}" \
            -e AMAZON_KEY_ID="${{ secrets.AMAZON_KEY_ID }}" \
            -e AMAZON_KEY_SECRET="${{ secrets.AMAZON_KEY_SECRET }}" \
            -e AMAZON_S3_BUCKET="${{ secrets.AMAZON_S3_BUCKET }}" \
            -e MONGO_CONN="${{ secrets.MONGO_CONN }}" \
            -e MONGO_USER="${{ secrets.MONGO_USER }}" \
            -e MONGO_PW="${{ secrets.MONGO_PW }}" \
            -e BUG_REPORT_EMAIL="${{ secrets.BUG_REPORT_EMAIL }}" \
            quickstark/api-images:latest
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 10
          
          # Check container status
          echo "Container status:"
          docker ps | grep images-api || echo "Container not found in ps output"
          
          # Check health endpoint
          echo "Checking health endpoint..."
          if curl -f http://localhost:9000/health 2>/dev/null; then
            echo "✅ Health check passed - API is running on port 9000"
          elif curl -f http://localhost:9000/ 2>/dev/null; then
            echo "✅ Root endpoint accessible on port 9000"
          else
            echo "⚠️  Health check failed - checking container logs..."
            docker logs --tail 50 images-api
          fi
          
          echo "✅ Deployment complete!"
          echo "Application is running at: http://localhost:9000"
      
      # ===== Post-Deployment =====
      
      - name: Deployment Notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful!"
            echo "Commit: ${{ github.sha }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Actor: ${{ github.actor }}"
            
            # Include SonarQube metrics if available
            if [ -n "${{ steps.sonar_metrics.outputs.bugs }}" ]; then
              echo ""
              echo "📊 Code Quality Metrics:"
              echo "  Bugs: ${{ steps.sonar_metrics.outputs.bugs }}"
              echo "  Vulnerabilities: ${{ steps.sonar_metrics.outputs.vulnerabilities }}"
              echo "  Code Smells: ${{ steps.sonar_metrics.outputs.code_smells }}"
              echo "  Coverage: ${{ steps.sonar_metrics.outputs.coverage }}%"
            fi
          else
            echo "❌ Deployment failed!"
            echo "Check the logs above for details"
          fi
      
      - name: Mark Deployment in Datadog
        if: success()
        continue-on-error: true
        run: |
          # First try with existing datadog-ci if available
          if command -v datadog-ci &> /dev/null; then
            datadog-ci deployment mark \
              --env "${{ secrets.DD_ENV }}" \
              --service "${{ secrets.DD_SERVICE }}" \
              --revision "${{ github.sha }}" \
              --tags "deployment_method:self_hosted" \
              --tags "repository:${{ github.repository }}" \
              --tags "branch:${{ github.ref_name }}" \
              --no-fail || true
          # Otherwise try to install it
          elif command -v npm &> /dev/null; then
            npm install -g @datadog/datadog-ci 2>/dev/null || true
            
            if command -v datadog-ci &> /dev/null; then
              datadog-ci deployment mark \
                --env "${{ secrets.DD_ENV }}" \
                --service "${{ secrets.DD_SERVICE }}" \
                --revision "${{ github.sha }}" \
                --tags "deployment_method:self_hosted" \
                --tags "repository:${{ github.repository }}" \
                --tags "branch:${{ github.ref_name }}" \
                --no-fail || true
            fi
          else
            echo "Datadog CI not available, skipping deployment marking"
          fi