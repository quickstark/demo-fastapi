name: Build and Deploy w DD Spans
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Install datadog-ci once at the beginning
      - name: Setup Datadog CI
        run: |
          if ! command -v datadog-ci &> /dev/null; then
            echo "Installing datadog-ci..."
            npm install -g @datadog/datadog-ci 2>/dev/null || {
              # Fallback: download binary directly
              curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64" \
                --output "/usr/local/bin/datadog-ci" && \
              chmod +x /usr/local/bin/datadog-ci
            }
          fi
      
      # Single SonarQube step that creates custom spans internally
      - name: SonarQube Analysis with Custom Spans
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_SITE: datadoghq.com
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Skip if no credentials
          if [ -z "$SONAR_TOKEN" ] || [ -z "$SONAR_HOST_URL" ]; then
            echo "⚠️  SonarQube credentials not configured - skipping"
            exit 0
          fi
          
          # Export for datadog-ci
          export DATADOG_API_KEY=$DD_API_KEY
          export DATADOG_SITE=$DD_SITE
          
          echo "🔍 Starting SonarQube analysis with detailed tracing..."
          
          # Create a parent span for the entire SonarQube process
          TRACE_ID=$(uuidgen | tr -d '-')
          PARENT_ID=$(printf '%016x' $RANDOM$RANDOM)
          
          # Phase 1: Project preparation
          echo "📋 Phase 1: Preparing project..."
          START_PREP=$(date +%s%N)
          
          # Count files and prepare
          FILES=$(find . -name "*.py" -not -path "./venv/*" | wc -l)
          echo "Found $FILES Python files to analyze"
          
          END_PREP=$(date +%s%N)
          PREP_DURATION=$(( (END_PREP - START_PREP) / 1000000 ))
          
          # Send preparation span to Datadog
          datadog-ci trace -- --name "SonarQube.Preparation" \
            --tags "project:demo-fastapi,files:$FILES" \
            --metrics "files.count:$FILES" \
            echo "Prepared $FILES files" 2>/dev/null || true
          
          # Phase 2: Run the actual scan
          echo "🔍 Phase 2: Running code analysis..."
          START_SCAN=$(date +%s%N)
          
          # Run scanner and capture output
          SCAN_OUTPUT=$(mktemp)
          docker run --rm \
            -e SONAR_HOST_URL="$SONAR_HOST_URL" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=quickstark_demo-fastapi_6ba235ba-ff96-459d-8607-919121b2ad98 \
            -Dsonar.sources=main.py,src \
            -Dsonar.tests=tests \
            -Dsonar.language=py \
            -Dsonar.python.version=3.9,3.10,3.11,3.12 \
            -Dsonar.sourceEncoding=UTF-8 \
            2>&1 | tee $SCAN_OUTPUT
          
          SCAN_STATUS=${PIPESTATUS[0]}
          END_SCAN=$(date +%s%N)
          SCAN_DURATION=$(( (END_SCAN - START_SCAN) / 1000000 ))
          
          # Send scan span
          datadog-ci trace -- --name "SonarQube.CodeAnalysis" \
            --tags "project:demo-fastapi,status:$([[ $SCAN_STATUS -eq 0 ]] && echo 'success' || echo 'failed')" \
            --metrics "duration.ms:$SCAN_DURATION" \
            echo "Analysis completed in ${SCAN_DURATION}ms" 2>/dev/null || true
          
          # Parse output for interesting metrics
          if grep -q "files indexed" $SCAN_OUTPUT; then
            INDEXED=$(grep "files indexed" $SCAN_OUTPUT | grep -oE '[0-9]+' | head -1)
            echo "📂 Indexed $INDEXED files"
          fi
          
          rm -f $SCAN_OUTPUT
          
          # Phase 3: Fetch metrics (only if scan succeeded)
          if [ $SCAN_STATUS -eq 0 ]; then
            echo "📊 Phase 3: Collecting metrics..."
            START_METRICS=$(date +%s%N)
            sleep 3  # Wait for SonarQube to process
            
            PROJECT="quickstark_demo-fastapi_6ba235ba-ff96-459d-8607-919121b2ad98"
            
            # Fetch metrics with error handling
            METRICS=$(curl -s -u "$SONAR_TOKEN:" \
              "$SONAR_HOST_URL/api/measures/component?component=${PROJECT}&metricKeys=bugs,vulnerabilities,code_smells,coverage,ncloc" \
              2>/dev/null) || METRICS="{}"
            
            # Parse metrics
            BUGS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="bugs") | .value // "0"' 2>/dev/null || echo "0")
            VULNS=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "0"' 2>/dev/null || echo "0")
            COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"' 2>/dev/null || echo "0")
            LINES=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="ncloc") | .value // "0"' 2>/dev/null || echo "0")
            
            END_METRICS=$(date +%s%N)
            METRICS_DURATION=$(( (END_METRICS - START_METRICS) / 1000000 ))
            
            # Send metrics span
            datadog-ci trace -- --name "SonarQube.MetricsCollection" \
              --tags "project:demo-fastapi" \
              --metrics "bugs:$BUGS,vulnerabilities:$VULNS,coverage:$COVERAGE,lines:$LINES,duration.ms:$METRICS_DURATION" \
              echo "Metrics: Bugs=$BUGS, Vulnerabilities=$VULNS, Coverage=$COVERAGE%" 2>/dev/null || true
            
            echo "📊 Metrics collected: Bugs=$BUGS, Vulnerabilities=$VULNS, Coverage=$COVERAGE%, Lines=$LINES"
            
            # Phase 4: Quality Gate check
            echo "✅ Phase 4: Checking quality gate..."
            START_QG=$(date +%s%N)
            
            QG_STATUS=$(curl -s -u "$SONAR_TOKEN:" \
              "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=${PROJECT}" \
              | jq -r '.projectStatus.status' 2>/dev/null) || QG_STATUS="UNKNOWN"
            
            END_QG=$(date +%s%N)
            QG_DURATION=$(( (END_QG - START_QG) / 1000000 ))
            
            # Send quality gate span
            datadog-ci trace -- --name "SonarQube.QualityGate" \
              --tags "project:demo-fastapi,status:$QG_STATUS" \
              --metrics "duration.ms:$QG_DURATION" \
              echo "Quality Gate: $QG_STATUS" 2>/dev/null || true
            
            if [ "$QG_STATUS" = "OK" ]; then
              echo "✅ Quality Gate: PASSED"
            else
              echo "❌ Quality Gate: $QG_STATUS"
            fi
            
            # Send summary metrics to StatsD
            if command -v nc &> /dev/null; then
              echo "sonarqube.analysis.complete:1|c|#project:demo-fastapi,status:success" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
              echo "sonarqube.bugs:$BUGS|g|#project:demo-fastapi" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
              echo "sonarqube.vulnerabilities:$VULNS|g|#project:demo-fastapi" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
              echo "sonarqube.coverage:$COVERAGE|g|#project:demo-fastapi" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
              echo "sonarqube.quality_gate:$([[ "$QG_STATUS" == "OK" ]] && echo 1 || echo 0)|g|#project:demo-fastapi" | nc -u -w1 127.0.0.1 8125 2>/dev/null || true
            fi
          fi
          
          # Total duration
          TOTAL_DURATION=$(( ($(date +%s%N) - START_PREP) / 1000000 ))
          echo "🎯 Total SonarQube analysis time: ${TOTAL_DURATION}ms"
        continue-on-error: true
      
      # Continue with rest of your pipeline (unchanged)
      - name: System Information
        run: |
          echo "=== System Information ==="
          echo "Hostname: $(hostname)"
          echo "User: $(whoami)"
          echo "Working Directory: $(pwd)"
          echo "OS: $(uname -a)"
          echo "=========================="
      
      # ... rest of your existing steps ...