# =============================================================================
# FastAPI Application Environment Variables
# =============================================================================
# Copy this file to .env.production and fill in your actual values
# This file should be committed to git as a template

# Application Configuration
DD_SERVICE=fastapi-app
DD_ENV=production
DD_VERSION=1.0

# Datadog Agent Configuration
DD_AGENT_HOST=192.168.1.200
DD_TRACE_AGENT_PORT=8126
# Set to true to disable DogStatsD if agent doesn't support non-local traffic
DD_DOGSTATSD_DISABLE=false
# Alternative: Set DogStatsD port if different from default
# DD_DOGSTATSD_PORT=8125

# Datadog Profiling Configuration
DD_PROFILING_ENABLED=true
DD_PROFILING_TIMELINE_ENABLED=true
# DD_PROFILING_UPLOAD_PERIOD=60
# DD_PROFILING_MAX_TIME_USAGE_PERCENT=1

# Datadog Database Monitoring (DBM) Configuration
# Enable DBM + APM trace correlation for all databases
DD_DBM_PROPAGATION_MODE=full
# Alternative values: 'service' (for SQL Server), 'full' (for PostgreSQL, MySQL, MongoDB)
# This enables correlation between database queries and APM traces

# Database Configuration (PostgreSQL)
# For GMKTec deployment: PostgreSQL runs at 192.168.1.100:9001
PGHOST=192.168.1.100
PGPORT=9001
PGDATABASE=your-database-name
PGUSER=your-db-username
PGPASSWORD=your-db-password

# Database Configuration (SQL Server)
# For GMKTec deployment: SQL Server runs at 192.168.1.100:9002
SQLSERVER_ENABLED=true  # Set to false to disable SQL Server integration entirely
SQLSERVERHOST=192.168.1.100
SQLSERVERPORT=9002
SQLSERVERUSER=your-sqlserver-username
SQLSERVERPW=your-sqlserver-password
SQLSERVERDB=your-sqlserver-database
# Note: For Azure SQL Database, use format: your-server.database.windows.net
# For connection reliability, ensure server allows your IP and connection pooling is configured

# External API Keys (NEVER commit real values)
OPENAI_API_KEY=sk-your-openai-key-here
DD_API_KEY=your-datadog-api-key
DD_APP_KEY=your-datadog-app-key
# SENDGRID_API_KEY=SG.your-sendgrid-key
# Note: SendGrid API key format should be: SG.xxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# Create at: https://app.sendgrid.com/settings/api_keys
# Required scopes: Mail Send (Full Access)
# Common 401 errors: Incorrect format, insufficient permissions, or revoked key
# REMOVED: SendGrid trial ended, migrating to Amazon SES

# Amazon SES Configuration
SES_REGION=us-west-2
SES_FROM_EMAIL=dirk@quickstark.com
# Note: SES uses the same AWS credentials as other AWS services (AMAZON_KEY_ID/AMAZON_KEY_SECRET)
# Ensure your sender email is verified in SES console
# For production, move out of SES sandbox mode

# AWS Configuration
AMAZON_KEY_ID=your-aws-access-key-id
AMAZON_KEY_SECRET=your-aws-secret-access-key
AMAZON_S3_BUCKET=your-s3-bucket-name

# MongoDB Configuration (if using)
MONGO_CONN=mongodb://your-mongo-connection-string
MONGO_USER=your-mongo-username
MONGO_PW=your-mongo-password

# Application Specific
BUG_REPORT_EMAIL=dirk@quickstark.com

# GMKTec Host Deployment Configuration
# Access via Tailscale network
GMKTEC_HOST=100.66.93.87
GMKTEC_USER=your-gmktec-username
GMKTEC_SSH_KEY=your-ssh-private-key-here
# Optional: SSH key passphrase if set
# GMKTEC_SSH_PASSPHRASE=your-passphrase

# Tailscale Configuration (for GitHub Actions v3)
# Recommended: OAuth Client approach (more secure)
TAILSCALE_OAUTH_CLIENT_ID=k1234your-client-id
TAILSCALE_OAUTH_CLIENT_SECRET=tskey-client-k1234your-client-secret
# Create at: https://tailscale.com/s/oauth-clients
# Grant scope: auth_keys (required for Tailscale GitHub Action v3)

# Docker Hub Configuration
DOCKERHUB_USER=your-dockerhub-username
DOCKERHUB_TOKEN=your-dockerhub-token

# Notion Configuration
NOTION_API_KEY=secret_your-notion-key
NOTION_DATABASE_ID=your-notion-database-id 